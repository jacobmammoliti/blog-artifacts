from fastapi import FastAPI
from sqlalchemy import create_engine, text
from sqlalchemy.pool import StaticPool
import uvicorn
import logging

app = FastAPI()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

cities = [
    {"name": "Toronto", "population": 2794356},
    {"name": "New York", "population": 8478072},
    {"name": "Los Angeles", "population": 3898747},
    {"name": "London", "population": 9841000},
    {"name": "Tokyo", "population": 14254039},
]

def _initialize_database(cities: list[dict]):
    # Use an in-memory database
    engine = create_engine(
        "sqlite://",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool
    )

    with engine.connect() as conn:
        conn.execute(
            text("""
                CREATE TABLE cities (
                id INTEGER NOT NULL,
                name VARCHAR,
                population INTEGER,
                PRIMARY KEY (id)
                )
                """))
        
        conn.execute(
            text("""
                INSERT INTO cities
                (name, population)
                VALUES (:name, :population)
                """), cities
        )
        logger.info("Database initalized.")

        conn.commit()
    
    return engine

engine = _initialize_database(cities)

# Define available endpoints
@app.get("/healthz")
async def read_main():
    return {"msg": "It works!"}

@app.get("/cities")
async def get_cities(name: str = None):
    with engine.connect() as conn:
        if name is None:
            query = text("""
                    SELECT name, population
                    FROM cities
                    """)
            result = conn.execute(query)
        else:
            query = text("""
                    SELECT name, population
                    FROM cities WHERE name=:name
                    """)
            
            result = conn.execute(
                query,
                {"name": name.title()}
            )
        
    return result.mappings().all()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)